{"ast":null,"code":"import { uuid, toArray } from './util';\nfunction formatCSSText(style) {\n  const content = style.getPropertyValue('content');\n  return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`;\n}\nfunction formatCSSProperties(style) {\n  return toArray(style).map(name => {\n    const value = style.getPropertyValue(name);\n    const priority = style.getPropertyPriority(name);\n    return `${name}: ${value}${priority ? ' !important' : ''};`;\n  }).join(' ');\n}\nfunction getPseudoElementStyle(className, pseudo, style) {\n  const selector = `.${className}:${pseudo}`;\n  const cssText = style.cssText ? formatCSSText(style) : formatCSSProperties(style);\n  return document.createTextNode(`${selector}{${cssText}}`);\n}\nfunction clonePseudoElement(nativeNode, clonedNode, pseudo) {\n  const style = window.getComputedStyle(nativeNode, pseudo);\n  const content = style.getPropertyValue('content');\n  if (content === '' || content === 'none') {\n    return;\n  }\n  const className = uuid();\n  try {\n    clonedNode.className = `${clonedNode.className} ${className}`;\n  } catch (err) {\n    return;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.appendChild(getPseudoElementStyle(className, pseudo, style));\n  clonedNode.appendChild(styleElement);\n}\nexport function clonePseudoElements(nativeNode, clonedNode) {\n  clonePseudoElement(nativeNode, clonedNode, ':before');\n  clonePseudoElement(nativeNode, clonedNode, ':after');\n}\n//# sourceMappingURL=clone-pseudos.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}