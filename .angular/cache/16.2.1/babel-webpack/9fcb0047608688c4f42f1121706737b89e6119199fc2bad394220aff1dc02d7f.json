{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { clonePseudoElements } from './clone-pseudos';\nimport { createImage, toArray, isInstanceOfElement } from './util';\nimport { getMimeType } from './mimes';\nimport { resourceToDataURL } from './dataurl';\nfunction cloneCanvasElement(_x) {\n  return _cloneCanvasElement.apply(this, arguments);\n}\nfunction _cloneCanvasElement() {\n  _cloneCanvasElement = _asyncToGenerator(function* (canvas) {\n    const dataURL = canvas.toDataURL();\n    if (dataURL === 'data:,') {\n      return canvas.cloneNode(false);\n    }\n    return createImage(dataURL);\n  });\n  return _cloneCanvasElement.apply(this, arguments);\n}\nfunction cloneVideoElement(_x2, _x3) {\n  return _cloneVideoElement.apply(this, arguments);\n}\nfunction _cloneVideoElement() {\n  _cloneVideoElement = _asyncToGenerator(function* (video, options) {\n    if (video.currentSrc) {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      canvas.width = video.clientWidth;\n      canvas.height = video.clientHeight;\n      ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n      const dataURL = canvas.toDataURL();\n      return createImage(dataURL);\n    }\n    const poster = video.poster;\n    const contentType = getMimeType(poster);\n    const dataURL = yield resourceToDataURL(poster, contentType, options);\n    return createImage(dataURL);\n  });\n  return _cloneVideoElement.apply(this, arguments);\n}\nfunction cloneIFrameElement(_x4) {\n  return _cloneIFrameElement.apply(this, arguments);\n}\nfunction _cloneIFrameElement() {\n  _cloneIFrameElement = _asyncToGenerator(function* (iframe) {\n    var _a;\n    try {\n      if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {\n        return yield cloneNode(iframe.contentDocument.body, {}, true);\n      }\n    } catch (_b) {\n      // Failed to clone iframe\n    }\n    return iframe.cloneNode(false);\n  });\n  return _cloneIFrameElement.apply(this, arguments);\n}\nfunction cloneSingleNode(_x5, _x6) {\n  return _cloneSingleNode.apply(this, arguments);\n}\nfunction _cloneSingleNode() {\n  _cloneSingleNode = _asyncToGenerator(function* (node, options) {\n    if (isInstanceOfElement(node, HTMLCanvasElement)) {\n      return cloneCanvasElement(node);\n    }\n    if (isInstanceOfElement(node, HTMLVideoElement)) {\n      return cloneVideoElement(node, options);\n    }\n    if (isInstanceOfElement(node, HTMLIFrameElement)) {\n      return cloneIFrameElement(node);\n    }\n    return node.cloneNode(false);\n  });\n  return _cloneSingleNode.apply(this, arguments);\n}\nconst isSlotElement = node => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\nfunction cloneChildren(_x7, _x8, _x9) {\n  return _cloneChildren.apply(this, arguments);\n}\nfunction _cloneChildren() {\n  _cloneChildren = _asyncToGenerator(function* (nativeNode, clonedNode, options) {\n    var _a, _b;\n    let children = [];\n    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {\n      children = toArray(nativeNode.assignedNodes());\n    } else if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {\n      children = toArray(nativeNode.contentDocument.body.childNodes);\n    } else {\n      children = toArray(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);\n    }\n    if (children.length === 0 || isInstanceOfElement(nativeNode, HTMLVideoElement)) {\n      return clonedNode;\n    }\n    yield children.reduce((deferred, child) => deferred.then(() => cloneNode(child, options)).then(clonedChild => {\n      if (clonedChild) {\n        clonedNode.appendChild(clonedChild);\n      }\n    }), Promise.resolve());\n    return clonedNode;\n  });\n  return _cloneChildren.apply(this, arguments);\n}\nfunction cloneCSSStyle(nativeNode, clonedNode) {\n  const targetStyle = clonedNode.style;\n  if (!targetStyle) {\n    return;\n  }\n  const sourceStyle = window.getComputedStyle(nativeNode);\n  if (sourceStyle.cssText) {\n    targetStyle.cssText = sourceStyle.cssText;\n    targetStyle.transformOrigin = sourceStyle.transformOrigin;\n  } else {\n    toArray(sourceStyle).forEach(name => {\n      let value = sourceStyle.getPropertyValue(name);\n      if (name === 'font-size' && value.endsWith('px')) {\n        const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;\n        value = `${reducedFont}px`;\n      }\n      if (isInstanceOfElement(nativeNode, HTMLIFrameElement) && name === 'display' && value === 'inline') {\n        value = 'block';\n      }\n      if (name === 'd' && clonedNode.getAttribute('d')) {\n        value = `path(${clonedNode.getAttribute('d')})`;\n      }\n      targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));\n    });\n  }\n}\nfunction cloneInputValue(nativeNode, clonedNode) {\n  if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {\n    clonedNode.innerHTML = nativeNode.value;\n  }\n  if (isInstanceOfElement(nativeNode, HTMLInputElement)) {\n    clonedNode.setAttribute('value', nativeNode.value);\n  }\n}\nfunction cloneSelectValue(nativeNode, clonedNode) {\n  if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {\n    const clonedSelect = clonedNode;\n    const selectedOption = Array.from(clonedSelect.children).find(child => nativeNode.value === child.getAttribute('value'));\n    if (selectedOption) {\n      selectedOption.setAttribute('selected', '');\n    }\n  }\n}\nfunction decorate(nativeNode, clonedNode) {\n  if (isInstanceOfElement(clonedNode, Element)) {\n    cloneCSSStyle(nativeNode, clonedNode);\n    clonePseudoElements(nativeNode, clonedNode);\n    cloneInputValue(nativeNode, clonedNode);\n    cloneSelectValue(nativeNode, clonedNode);\n  }\n  return clonedNode;\n}\nfunction ensureSVGSymbols(_x10, _x11) {\n  return _ensureSVGSymbols.apply(this, arguments);\n}\nfunction _ensureSVGSymbols() {\n  _ensureSVGSymbols = _asyncToGenerator(function* (clone, options) {\n    const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : [];\n    if (uses.length === 0) {\n      return clone;\n    }\n    const processedDefs = {};\n    for (let i = 0; i < uses.length; i++) {\n      const use = uses[i];\n      const id = use.getAttribute('xlink:href');\n      if (id) {\n        const exist = clone.querySelector(id);\n        const definition = document.querySelector(id);\n        if (!exist && definition && !processedDefs[id]) {\n          // eslint-disable-next-line no-await-in-loop\n          processedDefs[id] = yield cloneNode(definition, options, true);\n        }\n      }\n    }\n    const nodes = Object.values(processedDefs);\n    if (nodes.length) {\n      const ns = 'http://www.w3.org/1999/xhtml';\n      const svg = document.createElementNS(ns, 'svg');\n      svg.setAttribute('xmlns', ns);\n      svg.style.position = 'absolute';\n      svg.style.width = '0';\n      svg.style.height = '0';\n      svg.style.overflow = 'hidden';\n      svg.style.display = 'none';\n      const defs = document.createElementNS(ns, 'defs');\n      svg.appendChild(defs);\n      for (let i = 0; i < nodes.length; i++) {\n        defs.appendChild(nodes[i]);\n      }\n      clone.appendChild(svg);\n    }\n    return clone;\n  });\n  return _ensureSVGSymbols.apply(this, arguments);\n}\nexport function cloneNode(_x12, _x13, _x14) {\n  return _cloneNode.apply(this, arguments);\n}\n//# sourceMappingURL=clone-node.js.map\nfunction _cloneNode() {\n  _cloneNode = _asyncToGenerator(function* (node, options, isRoot) {\n    if (!isRoot && options.filter && !options.filter(node)) {\n      return null;\n    }\n    return Promise.resolve(node).then(clonedNode => cloneSingleNode(clonedNode, options)).then(clonedNode => cloneChildren(node, clonedNode, options)).then(clonedNode => decorate(node, clonedNode)).then(clonedNode => ensureSVGSymbols(clonedNode, options));\n  });\n  return _cloneNode.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}