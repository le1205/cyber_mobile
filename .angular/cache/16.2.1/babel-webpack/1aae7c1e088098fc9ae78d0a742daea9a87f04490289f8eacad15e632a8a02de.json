{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { embedResources } from './embed-resources';\nimport { toArray, isInstanceOfElement } from './util';\nimport { isDataUrl, resourceToDataURL } from './dataurl';\nimport { getMimeType } from './mimes';\nfunction embedProp(_x, _x2, _x3) {\n  return _embedProp.apply(this, arguments);\n}\nfunction _embedProp() {\n  _embedProp = _asyncToGenerator(function* (propName, node, options) {\n    var _a;\n    const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);\n    if (propValue) {\n      const cssString = yield embedResources(propValue, null, options);\n      node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));\n      return true;\n    }\n    return false;\n  });\n  return _embedProp.apply(this, arguments);\n}\nfunction embedBackground(_x4, _x5) {\n  return _embedBackground.apply(this, arguments);\n}\nfunction _embedBackground() {\n  _embedBackground = _asyncToGenerator(function* (clonedNode, options) {\n    if (!(yield embedProp('background', clonedNode, options))) {\n      yield embedProp('background-image', clonedNode, options);\n    }\n    if (!(yield embedProp('mask', clonedNode, options))) {\n      yield embedProp('mask-image', clonedNode, options);\n    }\n  });\n  return _embedBackground.apply(this, arguments);\n}\nfunction embedImageNode(_x6, _x7) {\n  return _embedImageNode.apply(this, arguments);\n}\nfunction _embedImageNode() {\n  _embedImageNode = _asyncToGenerator(function* (clonedNode, options) {\n    const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement);\n    if (!(isImageElement && !isDataUrl(clonedNode.src)) && !(isInstanceOfElement(clonedNode, SVGImageElement) && !isDataUrl(clonedNode.href.baseVal))) {\n      return;\n    }\n    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    const dataURL = yield resourceToDataURL(url, getMimeType(url), options);\n    yield new Promise((resolve, reject) => {\n      clonedNode.onload = resolve;\n      clonedNode.onerror = reject;\n      const image = clonedNode;\n      if (image.decode) {\n        image.decode = resolve;\n      }\n      if (image.loading === 'lazy') {\n        image.loading = 'eager';\n      }\n      if (isImageElement) {\n        clonedNode.srcset = '';\n        clonedNode.src = dataURL;\n      } else {\n        clonedNode.href.baseVal = dataURL;\n      }\n    });\n  });\n  return _embedImageNode.apply(this, arguments);\n}\nfunction embedChildren(_x8, _x9) {\n  return _embedChildren.apply(this, arguments);\n}\nfunction _embedChildren() {\n  _embedChildren = _asyncToGenerator(function* (clonedNode, options) {\n    const children = toArray(clonedNode.childNodes);\n    const deferreds = children.map(child => embedImages(child, options));\n    yield Promise.all(deferreds).then(() => clonedNode);\n  });\n  return _embedChildren.apply(this, arguments);\n}\nexport function embedImages(_x10, _x11) {\n  return _embedImages.apply(this, arguments);\n}\n//# sourceMappingURL=embed-images.js.map\nfunction _embedImages() {\n  _embedImages = _asyncToGenerator(function* (clonedNode, options) {\n    if (isInstanceOfElement(clonedNode, Element)) {\n      yield embedBackground(clonedNode, options);\n      yield embedImageNode(clonedNode, options);\n      yield embedChildren(clonedNode, options);\n    }\n  });\n  return _embedImages.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}