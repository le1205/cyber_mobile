{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { cloneNode } from './clone-node';\nimport { embedImages } from './embed-images';\nimport { applyStyle } from './apply-style';\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts';\nimport { getImageSize, getPixelRatio, createImage, canvasToBlob, nodeToDataURL, checkCanvasDimensions } from './util';\nexport function toSvg(_x) {\n  return _toSvg.apply(this, arguments);\n}\nfunction _toSvg() {\n  _toSvg = _asyncToGenerator(function* (node, options = {}) {\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    const clonedNode = yield cloneNode(node, options, true);\n    yield embedWebFonts(clonedNode, options);\n    yield embedImages(clonedNode, options);\n    applyStyle(clonedNode, options);\n    const datauri = yield nodeToDataURL(clonedNode, width, height);\n    return datauri;\n  });\n  return _toSvg.apply(this, arguments);\n}\nexport function toCanvas(_x2) {\n  return _toCanvas.apply(this, arguments);\n}\nfunction _toCanvas() {\n  _toCanvas = _asyncToGenerator(function* (node, options = {}) {\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    const svg = yield toSvg(node, options);\n    const img = yield createImage(svg);\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const ratio = options.pixelRatio || getPixelRatio();\n    const canvasWidth = options.canvasWidth || width;\n    const canvasHeight = options.canvasHeight || height;\n    canvas.width = canvasWidth * ratio;\n    canvas.height = canvasHeight * ratio;\n    if (!options.skipAutoScale) {\n      checkCanvasDimensions(canvas);\n    }\n    canvas.style.width = `${canvasWidth}`;\n    canvas.style.height = `${canvasHeight}`;\n    if (options.backgroundColor) {\n      context.fillStyle = options.backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas;\n  });\n  return _toCanvas.apply(this, arguments);\n}\nexport function toPixelData(_x3) {\n  return _toPixelData.apply(this, arguments);\n}\nfunction _toPixelData() {\n  _toPixelData = _asyncToGenerator(function* (node, options = {}) {\n    const {\n      width,\n      height\n    } = getImageSize(node, options);\n    const canvas = yield toCanvas(node, options);\n    const ctx = canvas.getContext('2d');\n    return ctx.getImageData(0, 0, width, height).data;\n  });\n  return _toPixelData.apply(this, arguments);\n}\nexport function toPng(_x4) {\n  return _toPng.apply(this, arguments);\n}\nfunction _toPng() {\n  _toPng = _asyncToGenerator(function* (node, options = {}) {\n    const canvas = yield toCanvas(node, options);\n    return canvas.toDataURL();\n  });\n  return _toPng.apply(this, arguments);\n}\nexport function toJpeg(_x5) {\n  return _toJpeg.apply(this, arguments);\n}\nfunction _toJpeg() {\n  _toJpeg = _asyncToGenerator(function* (node, options = {}) {\n    const canvas = yield toCanvas(node, options);\n    return canvas.toDataURL('image/jpeg', options.quality || 1);\n  });\n  return _toJpeg.apply(this, arguments);\n}\nexport function toBlob(_x6) {\n  return _toBlob.apply(this, arguments);\n}\nfunction _toBlob() {\n  _toBlob = _asyncToGenerator(function* (node, options = {}) {\n    const canvas = yield toCanvas(node, options);\n    const blob = yield canvasToBlob(canvas);\n    return blob;\n  });\n  return _toBlob.apply(this, arguments);\n}\nexport function getFontEmbedCSS(_x7) {\n  return _getFontEmbedCSS.apply(this, arguments);\n}\n//# sourceMappingURL=index.js.map\nfunction _getFontEmbedCSS() {\n  _getFontEmbedCSS = _asyncToGenerator(function* (node, options = {}) {\n    return getWebFontCSS(node, options);\n  });\n  return _getFontEmbedCSS.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}