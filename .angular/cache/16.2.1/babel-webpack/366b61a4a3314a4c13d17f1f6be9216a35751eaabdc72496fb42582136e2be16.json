{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction getContentFromDataUrl(dataURL) {\n  return dataURL.split(/,/)[1];\n}\nexport function isDataUrl(url) {\n  return url.search(/^(data:)/) !== -1;\n}\nexport function makeDataUrl(content, mimeType) {\n  return `data:${mimeType};base64,${content}`;\n}\nexport function fetchAsDataURL(_x, _x2, _x3) {\n  return _fetchAsDataURL.apply(this, arguments);\n}\nfunction _fetchAsDataURL() {\n  _fetchAsDataURL = _asyncToGenerator(function* (url, init, process) {\n    const res = yield fetch(url, init);\n    if (res.status === 404) {\n      throw new Error(`Resource \"${res.url}\" not found`);\n    }\n    const blob = yield res.blob();\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onerror = reject;\n      reader.onloadend = () => {\n        try {\n          resolve(process({\n            res,\n            result: reader.result\n          }));\n        } catch (error) {\n          reject(error);\n        }\n      };\n      reader.readAsDataURL(blob);\n    });\n  });\n  return _fetchAsDataURL.apply(this, arguments);\n}\nconst cache = {};\nfunction getCacheKey(url, contentType, includeQueryParams) {\n  let key = url.replace(/\\?.*/, '');\n  if (includeQueryParams) {\n    key = url;\n  }\n  // font resource\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '');\n  }\n  return contentType ? `[${contentType}]${key}` : key;\n}\nexport function resourceToDataURL(_x4, _x5, _x6) {\n  return _resourceToDataURL.apply(this, arguments);\n}\n//# sourceMappingURL=dataurl.js.map\nfunction _resourceToDataURL() {\n  _resourceToDataURL = _asyncToGenerator(function* (resourceUrl, contentType, options) {\n    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);\n    if (cache[cacheKey] != null) {\n      return cache[cacheKey];\n    }\n    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    if (options.cacheBust) {\n      // eslint-disable-next-line no-param-reassign\n      resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();\n    }\n    let dataURL;\n    try {\n      const content = yield fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({\n        res,\n        result\n      }) => {\n        if (!contentType) {\n          // eslint-disable-next-line no-param-reassign\n          contentType = res.headers.get('Content-Type') || '';\n        }\n        return getContentFromDataUrl(result);\n      });\n      dataURL = makeDataUrl(content, contentType);\n    } catch (error) {\n      dataURL = options.imagePlaceholder || '';\n      let msg = `Failed to fetch resource: ${resourceUrl}`;\n      if (error) {\n        msg = typeof error === 'string' ? error : error.message;\n      }\n      if (msg) {\n        console.warn(msg);\n      }\n    }\n    cache[cacheKey] = dataURL;\n    return dataURL;\n  });\n  return _resourceToDataURL.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}