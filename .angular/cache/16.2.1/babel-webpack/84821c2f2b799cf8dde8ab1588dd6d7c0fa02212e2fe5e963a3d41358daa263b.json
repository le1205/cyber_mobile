{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction toRegex(url) {\n  // eslint-disable-next-line no-useless-escape\n  const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n  return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n  const urls = [];\n  cssText.replace(URL_REGEX, (raw, quotation, url) => {\n    urls.push(url);\n    return raw;\n  });\n  return urls.filter(url => !isDataUrl(url));\n}\nexport function embed(_x, _x2, _x3, _x4, _x5) {\n  return _embed.apply(this, arguments);\n}\nfunction _embed() {\n  _embed = _asyncToGenerator(function* (cssText, resourceURL, baseURL, options, getContentFromUrl) {\n    try {\n      const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n      const contentType = getMimeType(resourceURL);\n      let dataURL;\n      if (getContentFromUrl) {\n        const content = yield getContentFromUrl(resolvedURL);\n        dataURL = makeDataUrl(content, contentType);\n      } else {\n        dataURL = yield resourceToDataURL(resolvedURL, contentType, options);\n      }\n      return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);\n    } catch (error) {\n      // pass\n    }\n    return cssText;\n  });\n  return _embed.apply(this, arguments);\n}\nfunction filterPreferredFontFormat(str, {\n  preferredFontFormat\n}) {\n  return !preferredFontFormat ? str : str.replace(FONT_SRC_REGEX, match => {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const [src,, format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n      if (!format) {\n        return '';\n      }\n      if (format === preferredFontFormat) {\n        return `src: ${src};`;\n      }\n    }\n  });\n}\nexport function shouldEmbed(url) {\n  return url.search(URL_REGEX) !== -1;\n}\nexport function embedResources(_x6, _x7, _x8) {\n  return _embedResources.apply(this, arguments);\n}\n//# sourceMappingURL=embed-resources.js.map\nfunction _embedResources() {\n  _embedResources = _asyncToGenerator(function* (cssText, baseUrl, options) {\n    if (!shouldEmbed(cssText)) {\n      return cssText;\n    }\n    const filteredCSSText = filterPreferredFontFormat(cssText, options);\n    const urls = parseURLs(filteredCSSText);\n    return urls.reduce((deferred, url) => deferred.then(css => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));\n  });\n  return _embedResources.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}