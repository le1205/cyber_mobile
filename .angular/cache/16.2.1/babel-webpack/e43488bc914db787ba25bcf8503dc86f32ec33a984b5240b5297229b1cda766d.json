{"ast":null,"code":"import _asyncToGenerator from \"D:/r/class record/TDH APP/cyber-mobile/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Share } from \"@capacitor/share\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nlet GlobalService = /*#__PURE__*/(() => {\n  var _class;\n  class GlobalService {\n    constructor(platform) {\n      this.platform = platform;\n    }\n    share(options) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        let isMobile = _this.platform.is(\"capacitor\");\n        if (isMobile) {\n          return yield Share.share(options);\n        }\n        return null;\n      })();\n    }\n    writeFile(options) {\n      return _asyncToGenerator(function* () {\n        let file = {};\n        try {\n          let option = typeof options == \"object\" ? options : null;\n          let state = yield Filesystem.checkPermissions();\n          state = yield Filesystem.requestPermissions();\n          if (state.publicStorage === \"prompt\") {}\n          if (state.publicStorage !== \"granted\") {\n            throw new Error(\"User denied permissions!\");\n          }\n          // alert(\"state: \" + JSON.stringify(state.publicStorage));\n          yield Filesystem.requestPermissions();\n          file = yield Filesystem.writeFile({\n            directory: Directory.ExternalStorage,\n            data: options?.data,\n            path: \"tech/\" + options?.path,\n            ...option\n          });\n          return file;\n        } catch (error) {\n          // alert(\"state: \" + JSON.stringify(error));\n          return file;\n        }\n      })();\n    }\n  }\n  _class = GlobalService;\n  _class.ɵfac = function GlobalService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Platform));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: \"root\"\n  });\n  return GlobalService;\n})();\nexport { GlobalService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}